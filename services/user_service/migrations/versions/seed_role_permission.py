"""seed role permission

Revision ID: 
Revises: 
Create Date: 
"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql.selectable import TableClause
from loguru import logger


# revision identifiers, used by Alembic.
revision = ''
down_revision = ''
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        seed_role_permission(op)
    except Exception as ex:
        logger.exception(str(ex), ex)
        raise ex
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    conn.execute(f"delete from role_permission where role_id is not null;")
    # ### end Alembic commands ###


def seed_role_permission(op: op):
    grant_permission_matrix = [
        *super_admin_matrix()
    ]

    insert_data = []
    tb_role_permission: TableClause = sa.table('role_permission',
        sa.column('role_id', sa.String),
        sa.column('permission_id', sa.String)
        )
    
    conn = op.get_bind()

    for item in grant_permission_matrix:
        role_res = conn.execute(f"""select id from role where code = '{item.get("role")}'""")
        role = role_res.fetchone()
        body = {
            'role_id': role[0],
            'is_deleted': False,
            'is_enabled': True
        }
        for action in item.get('actions'):
            statement = """select p.id from "permission" p where concat(p.resource, ':', p."action")"""
            if '*' in action:
                permission_res = conn.execute(statement + f""" like '{str(item.get('resource') + ':' + wildcard_change(action))}'""")
                permissions = permission_res.fetchall()
                for permission in permissions:
                    insert_data.append(
                            {**body, 'permission_id': permission[0]}
                        )
            else:
                checking_statement = statement + f""" = '{str(item.get('resource') + ':' + action)}'"""
                permission_res = conn.execute(checking_statement)
                permission = permission_res.fetchone()
                insert_data.append(
                        {**body, 'permission_id': permission[0]}
                    )
    op.bulk_insert(tb_role_permission, insert_data)


def wildcard_change(string: str):
    return string.replace('*', '%%')


def super_admin_matrix():
    return [
        {
            'role': 'super_admin',
            'resource': 'permission',
            'actions': '*'
        },
        {
            'role': 'super_admin',
            'resource': 'role',
            'actions': '*'
        },
        {
            'role': 'super_admin',
            'resource': 'user',
            'actions': '*'
        }
    ]
